@startuml
 class Person {
    private String firstName
    private String lastName
    private Long ID

    public Person(String firstName, String lastName)
    public Person(){}
    public String getFirstName()
    public String getLastName()
    public Long getID()
    public void setFirstName(String firstName)
    public void setLastName(String lastName)
    public void setID(Long ID)
    public String toString()
}

class Student extends Person{
 private int totalCredits
 private List<Course>enrolledCourses

 public void addCourse(Course newCourse)
 public void delete(Course course)
 public int getTotalCredits()
 public List<Course> getEnrolledCourses()
 public void setEnrolledCourses(List<Course> enrolledCourses)
 public void setTotalCredits(int totalCredits)
 public String toString()

}

 class Teacher extends Person {
    private List<Course>courses;
    public Teacher (String firstName,String lastName,Long teacherID,List<Course>courses)
    public Teacher (){};
    public List<Course> getCourses()
    public void setCourses(List<Course> courses)
    public String toString()

}


 class Course {
    private String name;
    private Person teacher;
    private int maxEnrollment;
    private  Long courseID;
    private List<Student>studentsEnrolled;
    private int credits;

    public Course (Long courseID,String name,Person teacher,int maxEnrollment,List<Student>studentsEnrolled,int credits)
    public Course (){};
    public boolean addStudent(Student newStudent){
    public int getNrOfEnrolledStudents()
    public String getName()
    public Person getTeacher()
    public List<Student> getStudentsEnrolled()
    public int getMaxEnrollment()
    public Long getCourseID()
    public int getCredits()
    public void setName(String name)
    public void setTeacher(Person teacher)
    void setMaxEnrollment(int maxEnrollment)
    public void setCredits(int credits)
    public void setStudentsEnrolled(List<Student> studentsEnrolled)
    public void setCourseID(Long courseID)
    public String toString()

}

interface ICrudRepository {


    E findOne(Long id)
    Iterable<E> findAll()
    E save(E entity)
    E delete(Long id)
    E update(E entity)

}


 abstract class InFileRepo implements ICrudRepository {
    protected List<T> repoList;

    public InFileRepo(List<T> repoList)
    public abstract List<T> readDataFromFile()
    public abstract  void writeToFile()
}


class StudentRepository extends InFileRepo {


    public StudentRepository(List<Student> repoList)
    public List<Student> getStudentList()
    public Student findOne(Long studentID)
    public Iterable<Student> findAll()
    public Student save(Student newStudent)
    public Student delete(Long id)
    public Student update (Student newStudent)
    public List<Student> readDataFromFile()
    public void writeToFile()

}

class TeacherRepository extends InFileRepo {


    public TeacherRepository(List<Teacher> repoList)
    public Teacher findOne(Long teacherID)
    public Iterable<Teacher> findAll()
    public Teacher save(Teacher newTeacher)
    public Teacher delete(Long id)
    public Teacher update (Teacher newTeacher)
    public List<Teacher> readDataFromFile()
    public void writeToFile()

}

class CourseRepository extends InFileRepo {


    public CourseRepository(List<Course> repoList)
    public Course findOne(Long courseID)
    public Iterable<Course> findAll()
    public Course save(Course newCourse)
    public Course delete(Long id)
    public Course update (Course newCourse)
    public List<Course> readDataFromFile()
    public void writeToFile()

}
class RegistrationSystemController
{
    private  StudentRepository studentRepository;
    private  TeacherRepository teacherRepository;
    private  CourseRepository courseRepository;

    public RegistrationSystemController(StudentRepository studentRepository, TeacherRepository teacherRepository, CourseRepository courseRepository)


    public StudentRepository getStudentRepository()
    public TeacherRepository getTeacherRepository()
    public CourseRepository getCourseRepository()
    public boolean register( Student student,Course course)
    public List<Course> retrieveCoursesWithFreePlaces()
    public Course deleteCourseByTeacher(Course course, Teacher teacher,List<Student> studentsEnrolledForACourse)
    public List<Student> sortStudentsAlphabetically(List<Student>students)
    public List<Course> sortCoursesAlphabetically(List<Course> courses)
    public List<Student> filterStudentsByCreditNr(int credits,List<Student>studentList)
    public List<Course> filterCoursesByCreditNr(int credits)

}
class View{
public RegistrationSystemController controller

public printMenu(String menuType)
public showMainMenu()
public showStudentMenu()
public showTeacherMenu()
printCourses(List<Course>courses)
printStudents(List<Student>students)
}
Course->Student:Composition


TeacherRepository -> RegistrationSystemController : Composition

@enduml